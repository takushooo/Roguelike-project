+ Game.java
===
import java.util.Scanner;
import java.util.Random;

public class Game {
    private Player player;
    private Monster monster;
    private int winStreak;
    private static final int MAX_WINS = 10;
    private static final Scanner scanner = new Scanner(System.in);
    private static final Random random = new Random();

    public Game() {
        System.out.print("プレイヤーの名前を入力してください: ");
        String playerName = scanner.nextLine();
        this.player = new Player(playerName);
        this.monster = new Monster();
        this.winStreak = 0;
    }

    private Monster createRandomMonster() {
        int monsterType = random.nextInt(3);
        switch (monsterType) {
            case 0:
                return new Goblin();
            case 1:
                return new Orc();
            case 2:
                return new Dragon();
            default:
                return new Goblin(); // デフォルトのケース
        }
    }


    private boolean playerTurn() {
        System.out.println("行動を選択してください: 1. 攻撃する 2. 防御する");
        int choice = scanner.nextInt();
        return choice == 1;
    }

    private boolean monsterTurn() {
        int attackChance = 50; // 攻撃する確率を50%に設定
        return random.nextInt(100) < attackChance; // 0から99の整数で、30未満の場合に攻撃
    }

    private boolean fight() {
        boolean playerAttacks = playerTurn();
        boolean monsterAttacks = monsterTurn();

        // プレイヤーの攻撃処理
        if (playerAttacks) {
            int damageDealt = player.getAttackPower();
            monster.setHp(monster.getHp() - damageDealt);
            System.out.println("モンスターに " + damageDealt + " のダメージを与えた！");
            if (monster.getHp() <= 0) {
                System.out.println("モンスターを倒した！");
                return true; // プレイヤーの勝利
            }
        }

        // モンスターの攻撃処理
        if (monsterAttacks && monster.getHp() > 0) {
            int damage = playerAttacks ? monster.getAttack() : Math.max(monster.getAttack() - player.getDefensePower(), 0);
            player.setHp(player.getHp() - damage);
            System.out.println(monster.getType() + "が攻撃！ 受けたダメージ: " + damage);
            if (player.getHp() <= 0) {
                System.out.println("プレイヤーが倒れた... ゲームオーバー");
                return false; // プレイヤーの敗北
            }
        } else if (monsterAttacks) {
            System.out.println(monster.getType() + "は攻撃を仕掛けてきたが、ミス！");
        } else {
            System.out.println(monster.getType() + "は何もしなかった。");
        }

        return false; // 戦いが続く
    }

    private int selectAttributeToRetain() {
        System.out.println("どの属性を引き継ぎますか？");
        System.out.println("1. 最大HP");
        System.out.println("2. 攻撃力");
        System.out.println("3. 防御力");
        System.out.print("選択してください（1, 2, 3）: ");
        return scanner.nextInt(); // 選択された属性の種類を返す
    }

    public void start() {
        System.out.println(player.getName() + "が冒険を始める！");
        monster = createRandomMonster(); // ゲーム開始時に最初のモンスターを生成

        while (winStreak < MAX_WINS) {
            System.out.println("現在のHP: " + player.getHpStatus() + " (攻撃力: " + player.getAttackPower() + ", 防御力: " + player.getDefensePower() + ")");
            System.out.println(monster.getType() + "が現れた！戦闘開始！"); // モンスターの種類を表示
            System.out.println("モンスターのHP: " + monster.getHp() + ", 攻撃力: " + monster.getAttack());

            boolean won = fight();
            if (won) {
                winStreak++;
                System.out.println("勝利！現在の連勝数: " + winStreak);
                monster = createRandomMonster(); // 新しいモンスターの生成
            } else if (player.getHp() <= 0) {
                System.out.println("敗北...");
                int choice = selectAttributeToRetain();

                // 属性の再設定
                if (choice != 1) player.randomizeMaxHp(); // 最大HPをランダムに再設定
                if (choice != 2) player.randomizeAttackPower(); // 攻撃力をランダムに再設定
                if (choice != 3) player.randomizeDefensePower(); // 防御力をランダムに再設定

                winStreak = 0;
            }

            if (player.getHp() <= 0) {
                System.out.println("プレイヤーが倒れた... ゲームオーバー");
                break;
            }

            if (winStreak >= MAX_WINS) {
                System.out.println("ゲームクリア！おめでとう！");
                break;
            }
        }
    }

    public static void main(String[] args) {
        Game game = new Game();
        game.start();
    }
}
===

+ Player.java
===
import java.util.Random;

public class Player implements Character{
    private String name;
    private int hp;
    private int maxHp;
    private int mp;
    private Equipment equipment;

    // 最大HPが指定されない場合に使用するコンストラクタ
    public Player(String name) {
        this(name, (int)(Math.random() * 100) + 1, new Random().nextInt(50) + 1, new Random().nextInt(50) + 1);
    }

    // 最大HP、攻撃力、防御力を指定してプレイヤーを作成するコンストラクタ
    public Player(String name, int maxHp, int attackPower, int defensePower) {
        this.name = name;
        this.maxHp = maxHp;
        this.hp = maxHp;
        this.mp = (int)(Math.random() * 50) + 1;
        this.equipment = new Equipment();
        this.equipment.setAttackBoost(attackPower);
        this.equipment.setDefenseBoost(defensePower);
    }

    // GetterとSetter
    public String getName() {
        return name;
    }

    public int getHp() {
        return hp;
    }

    public void setHp(int hp) {
        this.hp = hp;
    }

    public int getMp() {
        return mp;
    }

    public void setMp(int mp) {
        this.mp = mp;
    }

    public Equipment getEquipment() {
        return equipment;
    }

    public void setEquipment(Equipment equipment) {
        this.equipment = equipment;
    }

    public String getHpStatus() {
        return hp + "/" + maxHp; // HPの状態を文字列で返す
    }

    // getMaxHp メソッドを追加します
    public int getMaxHp() {
        return maxHp;
    }

    // 攻撃力を取得するメソッド
    public int getAttackPower() {
        return this.equipment.getAttackBoost();
    }

    // 防御力を取得するメソッド
    public int getDefensePower() {
        return this.equipment.getDefenseBoost();
    }

    // 攻撃力を設定するメソッド
    public void setAttackPower(int attackPower) {
        this.equipment.setAttackBoost(attackPower);
    }

    // 防御力を設定するメソッド
    public void setDefensePower(int defensePower) {
        this.equipment.setDefenseBoost(defensePower);
    }

    // 最大HPをランダムに再設定するメソッド
    public void randomizeMaxHp() {
        this.maxHp = new Random().nextInt(100) + 1;
        this.hp = this.maxHp;
    }

    // 攻撃力をランダムに再設定するメソッド
    public void randomizeAttackPower() {
        this.equipment.setAttackBoost(new Random().nextInt(50) + 1);
    }

    // 防御力をランダムに再設定するメソッド
    public void randomizeDefensePower() {
        this.equipment.setDefenseBoost(new Random().nextInt(50) + 1);
    }

    @Override
    public int attack() {
        return getAttackPower(); // 攻撃力を返す
    }
}
===

+ Monster.java
===
public class Monster implements Character{
    private String type;
    private int hp;
    private int attack;

    
    // 引数なしのコンストラクタ
    public Monster() {
        this.type = "ゴブリン";
        this.hp = (int)(Math.random() * 50) + 1;
        this.attack = (int)(Math.random() * 10) + 1;
    }

    // 引数ありのコンストラクタ
    public Monster(String type, int hp, int attack) {
        this.type = type;
        this.hp = hp;
        this.attack = attack;
    }

    // GetterとSetter
    public String getType() {
        return type;
    }

    public void setHp(int hp) {
        this.hp = hp;
    }

    public int getHp() {
        return hp;
    }

    public int getAttack() {
        return attack;
    }

    @Override
    public int attack() {
        return getAttack(); // モンスターの攻撃力を返す
    }
}
===

+ Equipment.java
===
import java.util.Random;

public class Equipment {
    private String name;
    private int attackBoost;
    private int defenseBoost;
    private static final Random random = new Random();

    public Equipment() {
        this.name = "基本装備";
        this.attackBoost = (int)(Math.random() * 100) + 1;
        this.defenseBoost = (int)(Math.random() * 100) + 1;
    }


    // GetterとSetterを追加
    // 攻撃力増加量を取得するメソッド
    public int getAttackBoost() {
        return this.attackBoost;
    }

    // 防御力増加量を取得するメソッド
    public int getDefenseBoost() {
        return this.defenseBoost;
    }

    // 攻撃力増加量を設定するメソッド
    public void setAttackBoost(int attackBoost) {
        this.attackBoost = attackBoost;
    }

    // 防御力増加量を設定するメソッド
    public void setDefenseBoost(int defenseBoost) {
        this.defenseBoost = defenseBoost;
    }
}
===

+ Character.java
===
public interface Character {
    int getHp();
    void setHp(int hp);
    int attack();
}
===

+ Goblin.java
===
// Goblin.java
public class Goblin extends Monster {
    public Goblin() {
        super("ゴブリン", (int)(Math.random() * 50) + 50, (int)(Math.random() * 10) + 5);
    }
}
===

+ Orc.java
===
// Orc.java
public class Orc extends Monster {
    public Orc() {
        super("オーク", (int)(Math.random() * 100) + 100, (int)(Math.random() * 15) + 10);
    }
}
===

+ Doragon.java
===
// Dragon.java
public class Dragon extends Monster {
    public Dragon() {
        super("ドラゴン", (int)(Math.random() * 200) + 200, (int)(Math.random() * 25) + 20);
    }
}
===